               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1

0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep




0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts

0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0089                         dw          #adcSample/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 008c                         dw          #adcSample/execute
               pFwTaskTerminateFuncTable:
006a ---- 00da                         dw          #adcSample/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)


               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: ADC Sample"
               adcSample/cfg:
               adcSample/cfg/changeMask:
0075 ---- 0000                         dw          #0
               adcSample/cfg/minReportInterval:
0076 ---- 0000                         dw          #0
               adcSample/cfg/pAuxioAAdInput:
0077 ---- 0007                         dw          #7
0078 ---- 0006                         dw          #6
0079 ---- 0005                         dw          #5
007a ---- 0004                         dw          #4
007b ---- 0003                         dw          #3
               adcSample/cfg/pAuxioASensorOutput:
007c ---- 0000                         dw          #0
007d ---- 0000                         dw          #0
007e ---- 0000                         dw          #0
007f ---- 0000                         dw          #0
0080 ---- 0000                         dw          #0
               adcSample/input:
               adcSample/output:
               adcSample/output/adcValue:
0081 ---- 0000                         dw          #0
               adcSample/output/pAdcValue:
0082 ---- 0000                         dw          #0
0083 ---- 0000                         dw          #0
0084 ---- 0000                         dw          #0
0085 ---- 0000                         dw          #0
0086 ---- 0000                         dw          #0
               adcSample/state:
               adcSample/state/oldAdcMaskedBits:
0087 ---- 0000                         dw          #0
               adcSample/state/samplesSinceLastReport:
0088 ---- 0000                         dw          #0
               .segment end "Task: ADC Sample"


               .segment begin "Task: ADC Sample"
               adcSample/initialize:
               ;? // Select ADC input (A3 / DIO26)
               ;? //adcSelectGpioInput(4);
               ;?
               ;? ///might delete this
               ;? //adcSelectGpioInput(AUXIO_A_SENSOR_OUTPUT);
               ;?
               ;? // Schedule the first execution
               ;?
               ;? //cfg.pAuxioASensorOutput[0]=4;
               ;? //cfg.pAuxioASensorOutput[1]=7;
               ;?
               ;? fwScheduleTask(1);
0089 ---- 0001                         ld          R0, #1
008a ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcSample/initializeDone:
008b ---- adb7                         rts




               adcSample/execute:
               ;? // Enable the ADC (fixed reference, 2.7 us sample time, manual trigger)
               ;?
               ;?
               ;? // For each pin (with one entry per pin in cfg.pAdcValue[] and output.pAdcValue[]) ...
               ;? for (U16 n = 0; n < SENSOR_OUTPUT_COUNT; n++) {
008c ---- 0000                         ld          R0, #0
               /id0123:
               ;?
               ;?     adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_5P46_MS, ADC_TRIGGER_MANUAL);
008d ---- f502                             loop        #128, /id0089
008e ---- fd47                             nop
008f ---- fd47                             nop
0090 ---- fd47                             nop
               /id0089:
0091 ---- 7001                             ld          R7, #((0 | (((14 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0092 ---- 1462                             jsr         AdiDdiAcquire
0093 ---- fb4d                             out         R7, [#IOP_ADISET_ADCREF]
0094 8609 7101                             ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0096 ---- 6431                             iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0090:
0097 ---- 2531                             iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0098 ---- a6fe                             biob0       /id0090
0099 ---- fb00                             out         R7, [#IOP_ANAIF_ADCCTL]
009a ---- 7078                             ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
009b ---- fb54                             out         R7, [#IOP_ADICLR_ADC]
009c ---- 7070                             ld          R7, #(14 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
009d ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
009e ---- 7003                             ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
009f ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00a0 ---- fd47                             nop
00a1 ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00a2 ---- 1465                             jsr         AdiDdiRelease
               ;?
               ;?     // Select ADC input
               ;?     adcSelectGpioInput(cfg.pAuxioAAdInput[n]);
00a3 ---- 6077                             ld          R6, #(adcSample/cfg/pAuxioAAdInput + 0)
00a4 ---- ff1e                             ld          R7, [R6+R0]
00a5 ---- 14db                             jsr         AdccompbSelectGpioInput
               ;?
               ;?     // Sample the pin and store the ADC value
               ;?     adcGenManualTrigger();
00a6 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.pAdcValue[n]);
00a7 ---- 601f                             ld          R6, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00a8 ---- eb2c                             out         R6, [#IOP_EVCTL_SCEWEVSEL]
00a9 ---- fdb1                             wev1        #WEVSEL_PROG
00aa ---- e902                             in          R6, [#IOP_ANAIF_ADCFIFO]
00ab ---- 7082                             ld          R7, #(adcSample/output/pAdcValue + 0)
00ac ---- ef3f                             st          R6, [R7+R0]
               ;?
               ;?
               ;?     output.adcValue=output.pAdcValue[n];
00ad ---- 6082                             ld          R6, #(adcSample/output/pAdcValue + 0)
00ae ---- ef1e                             ld          R6, [R6+R0]
00af ---- 6c81                             st          R6, [#adcSample/output/adcValue]
               ;?
               ;?     //    adcDisable();
               ;?
               ;?     // Disable the ADC
               ;?     // Alert the driver if outside of change mask
               ;?     U16 adcMaskedBits = output.pAdcValue[n]& cfg.changeMask;
00b0 ---- 6082                             ld          R6, #(adcSample/output/pAdcValue + 0)
00b1 ---- ef1e                             ld          R6, [R6+R0]
00b2 ---- 7875                             ld          R7, [#adcSample/cfg/changeMask]
00b3 ---- ed07                             and         R6, R7
               ;?     if (adcMaskedBits != state.oldAdcMaskedBits) {
00b4 ---- 7887                             ld          R7, [#adcSample/state/oldAdcMaskedBits]
00b5 ---- ed2f                             cmp         R6, R7
00b6 ---- b609                             beq         /id0105
               ;?         //fwGenQuickAlertInterrupt();
               ;?         fwGenAlertInterrupt();
00b7 ---- 686c                                 ld          R6, [#fwCtrlInt/bvTaskIoAlert]
00b8 ---- e201                                 or          R6, #(1 << 0)
00b9 ---- 6c6c                                 st          R6, [#fwCtrlInt/bvTaskIoAlert]
               ;?         state.samplesSinceLastReport = state.samplesSinceLastReport + 1;
00ba ---- 6888                                 ld          R6, [#adcSample/state/samplesSinceLastReport]
00bb ---- e801                                 add         R6, #1
00bc ---- 6c88                                 st          R6, [#adcSample/state/samplesSinceLastReport]
               ;?         state.samplesSinceLastReport = 0;
00bd ---- 6000                                 ld          R6, #0
00be ---- 6c88                                 st          R6, [#adcSample/state/samplesSinceLastReport]
               ;?     } else {
00bf ---- 04c3                             jmp         /id0108
               /id0105:
               ;?         state.samplesSinceLastReport = state.samplesSinceLastReport + 1;
00c0 ---- 6888                                 ld          R6, [#adcSample/state/samplesSinceLastReport]
00c1 ---- e801                                 add         R6, #1
00c2 ---- 6c88                                 st          R6, [#adcSample/state/samplesSinceLastReport]
               ;?     }
               /id0108:
               ;?
               ;?     //Alert driver if minimum report interval has expired
               ;?     if(cfg.minReportInterval != 0) {
00c3 ---- 6876                             ld          R6, [#adcSample/cfg/minReportInterval]
00c4 ---- ea00                             cmp         R6, #0
00c5 ---- b609                             beq         /id0113
               ;?         if(state.samplesSinceLastReport >= cfg.minReportInterval) {
00c6 ---- 6888                                 ld          R6, [#adcSample/state/samplesSinceLastReport]
00c7 ---- 7876                                 ld          R7, [#adcSample/cfg/minReportInterval]
00c8 ---- ed2f                                 cmp         R6, R7
00c9 ---- ae05                                 bltu        /id0115
               ;?             //fwGenQuickAlertInterrupt();
               ;?             fwGenAlertInterrupt();
00ca ---- 686c                                     ld          R6, [#fwCtrlInt/bvTaskIoAlert]
00cb ---- e201                                     or          R6, #(1 << 0)
00cc ---- 6c6c                                     st          R6, [#fwCtrlInt/bvTaskIoAlert]
               ;?             state.samplesSinceLastReport = 0;
00cd ---- 6000                                     ld          R6, #0
00ce ---- 6c88                                     st          R6, [#adcSample/state/samplesSinceLastReport]
               ;?         }
               /id0115:
               ;?     }
               /id0113:
               ;?
               ;?     // Save old masked ADC value
               ;?     state.oldAdcMaskedBits = output.pAdcValue[n] & cfg.changeMask;
00cf ---- 6082                             ld          R6, #(adcSample/output/pAdcValue + 0)
00d0 ---- ef1e                             ld          R6, [R6+R0]
00d1 ---- 7875                             ld          R7, [#adcSample/cfg/changeMask]
00d2 ---- ed07                             and         R6, R7
00d3 ---- 6c87                             st          R6, [#adcSample/state/oldAdcMaskedBits]
               ;?
               ;? }
00d4 ---- 8801                         add         R0, #1
00d5 ---- 8a05                         cmp         R0, #5
00d6 ---- aeb6                         bltu        /id0123
               ;? //adcDisable();
               ;? //fwGenAlertInterrupt();
               ;? fwScheduleTask(1);
00d7 ---- 0001                         ld          R0, #1
00d8 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               adcSample/executeDone:
00d9 ---- adb7                         rts




               adcSample/terminate:
               ;?
               adcSample/terminateDone:
00da ---- adb7                         rts
               .segment end "Task: ADC Sample"


               .segment begin "Procedure Library"
               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00db ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
00dc ---- 1462                         jsr         AdiDdiAcquire
00dd 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00df ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
00e0 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
00e2 ---- ed8f                         lsr         R6, R7
00e3 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Ensure that it has taken effect
00e4 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
00e5 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
00e6 ---- 1465                         jsr         AdiDdiRelease
00e7 ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by DESKTOP-0SVFAK1 at 2020-06-22 08:12:19.617
